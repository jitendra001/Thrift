//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Customer = function(args) {
  this.customerId = null;
  this.customerName = null;
  this.customerAddress = null;
  if (args) {
    if (args.customerId !== undefined) {
      this.customerId = args.customerId;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerId is unset!');
    }
    if (args.customerName !== undefined) {
      this.customerName = args.customerName;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerName is unset!');
    }
    if (args.customerAddress !== undefined) {
      this.customerAddress = args.customerAddress;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field customerAddress is unset!');
    }
  }
};
Customer.prototype = {};
Customer.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.customerId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.customerAddress = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Customer.prototype.write = function(output) {
  output.writeStructBegin('Customer');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.I32, 1);
    output.writeI32(this.customerId);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 2);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  if (this.customerAddress !== null && this.customerAddress !== undefined) {
    output.writeFieldBegin('customerAddress', Thrift.Type.STRING, 3);
    output.writeString(this.customerAddress);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CustomerUnavailable = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(CustomerUnavailable, Thrift.TException);
CustomerUnavailable.prototype.name = 'CustomerUnavailable';
CustomerUnavailable.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CustomerUnavailable.prototype.write = function(output) {
  output.writeStructBegin('CustomerUnavailable');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

